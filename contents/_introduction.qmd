## Robust Robotic System Design {visibility="uncounted"}
<!-- ###################################################################### -->

### The Surge in Reliance Upon Robotic Systems

<br/>

:::: {.columns}

<!-- -  A robot can utilize a wide variety of sensors to observe its environment -->

::: {.column width="50%"}

<br>

:::{.fragment .fade-in-then-semi-out fragment-index=0}
* Warehouse automation
:::

:::{.fragment .fade-in-then-semi-out fragment-index=1}
* Autonomous vehicles
:::

:::{.fragment .fade-in-then-semi-out fragment-index=2}
* Drones for first responders
:::

:::{.fragment .fade-in-then-semi-out fragment-index=3}
* Utility drones
:::


:::

::: {.column width="50%"}
<!-- ![](images/all.png){fig-alight="center" width=100%} -->

::: {.r-stack}

:::{.fragment .fade-in-then-out fragment-index=0 }

<!-- video data-autoplay src="./contents/assets/warehouse22.mp4"></video-->
![](./contents/assets/warehouse22.mp4){autoplay="true" muted="true"}

:::

:::{.fragment .fade-in-then-out fragment-index=1 }

<!-- video data-autoplay src="contents/assets/vehicles.mp4"></video-->
![](./contents/assets/vehicles.mp4){autoplay="true" muted="true"}

:::

:::{.fragment .fade-in-then-out fragment-index=2 }

<!-- video data-autoplay src="contents/assets/responders.mp4"></video-->
![](./contents/assets/responders.mp4){autoplay="true" muted="true"}

:::



::: {.fragment .fade-in fragment-index=3}
<!-- ::: {.fragment .fade-out fragment-index=5} -->
<!-- video data-autoplay src="contents/assets/astria_22.mp4"></video-->
![](./contents/assets/astria_22.mp4){autoplay="true" muted="true"}
:::
<!-- ::: -->

<!-- 
:::{.fragment .fade-in fragment-index=5 }

![](media/robots_common_2.png){fig-alight="center" width=100%}

::: -->

:::

:::

::::

::: {.fragment .fade-right fragment-index=4}
::: {.callout-tip appearance="minimal"}

<span style="font-size:22.5px">Robotics becoming ever more ubiquitous, and increasing the requirement of 
robust sensing and control.</span>

:::
:::

::: {.notes}
* Robot Institute of America: reprogrammable, multifunctional manipulator designed to move things.
* The definition changed and robots became more ubiquitous, requiring ever more **robustness**.
:::


## Robustness against Contact under Uncertainty {auto-animate=true auto-animate-easing="ease-in-out"}

::: {.r-stack}

::: {layout="[[-1], [1], [-1]]"}
![](./contents/assets/nonrobust_plan.svg){width=1500 .fragment .fade-in-then-out fragment-index=0}

<!-- {{< video contents/assets/astria_encoded_trimmed.mp4 
    aspect-ratio=16x9 width="600" >}} -->
:::

::: {layout="[[-1], [1], [-1]]"}
![](./contents/assets/astria_encoded_trimmed.mp4){width=1500 .fragment .fade-in-then-out fragment-index=1}
:::

:::

::: {.notes}
* Need to make and break contact to be useful
* Contact inherently very complex
  - Instantaneous jumps
  - Dynamics changes
* A quasi-static or quasi-dynamic motion plan may fail due to these
* Observe Astria bird-diverter installation
  - Unexpected mode of contact kicks and destabilizes the flight controller.

:::

## Sources of Uncertainty {auto-animate=true auto-animate-easing="ease-in-out"}


::: {layout="[[-1], [1], [-1]]"}
![](./contents/assets/trained_closedloop_cleanedup.svg){width="100%" .fragment fragment-index=1}
:::

* $H_d^\theta$ is a desired storage function.
* $H_d^\theta$ is a neural network parametrized by $\theta$.

::: {.notes}
* Classical control system depiction
* Desired task encoded in the trajectory cost block
* Evolution of the states described by MDEs (necessary for friction/contact modeling)
* Estimated state corrupted with noise

* Controller is trained with imperfections
  - dynamics model
  - perfect state information or model of the noise

**Conclusion:** Performance of the CL system in real life will deviate from predictions.
Need to devise a controller that is insensitive to unexpected yet inevitable discrepancies.
:::


## Repercussions of Untreated Uncertainty {auto-animate=true}

### The Case of the Rimless Wheel


:::: {.columns}
::: {.column width="50%"}

{{< video https://youtu.be/7t1E7FWawgA 
   height=300 width="100%" >}}

::: {.callout-warning appearance="minimal"}
Training without taking uncertainty into account
:::

:::

::: {.column width="50%"}
{{< video https://youtu.be/Kl6_hAY8PFw
    height=300 width="100%" >}}

::: {.callout-tip appearance="minimal"}
Failing real-life implementation
:::

:::

::::

::: {.incremental}
* Need to design both robust state estimation and controllers.
* Domain randomization and Bayesian learning help for controller design.
* GTSAM and optimization over factor graphs help for state estimation.
:::

::: {.notes}

* Fairly complex robot trained in simulation, implemented in real life.
* Shows the sources of uncertainty:
  - manufacturing tolerances
  - uneven terrain
  - sensor characteristics
* Performance suffers.

**Take away:** 

* State estimators and controllers need to be designed to be insensitive
  - to various kinds of uncertainties.
* Will advocate several concepts in this vein
  - PBC
  - Bayesian learning
  - domain randomization
  - optimization over factor graphs.

:::


## Existing vs. Proposed Control Synthesis Methods {.smaller transition="fade" visibility="hidden"}

<br/>

:::: {.fragment .semi-fade-out fragment-index=1}
::: {layout="[100,-5,60]" layout-valign="center"}
Reinforcement learning (similarly Decision Transformers)
![](contents/assets/rl-outline.svg)

Strengths
: 
More general \
Unknown dynamics OK

Weaknesses
: 
Sample complexity \
Stability guarantees?
:::
::::

:::: {.fragment  fragment-index=1}
::: {layout="[100,-5,60]" layout-valign="center"}
Bayesian Neural Passivity-based Control
![](contents/assets/pbc-ml-outline.svg)

Strengths
: 
Stability guarantees \
Closed-form policy \
Reasons about model uncertainties \

:::
::::

::: {.notes}
* Basic methods such as RL and even decision transformers
  - are data hungry,
  - stability guarantees hard to obtain
* Our methods
  - PBC yields robustness and some stability guarantees
  - MDEs, SDEs allow domain randomization rigorously
  - Bayesian learning provides more robustness.
:::



## Robustness via Bayesian Learning

::: {.callout-tip}
## System Parameter Uncertainty and Measurement Noise
![](contents/assets/regular-vs-bayesian.svg){fig-align="center"}
:::

:::: {layout-ncol="2"}

::: {.callout-warning appearance="minimal"}
**Less robust**: learns point estimates of the weights.
:::

::: {.callout-warning appearance="minimal"}
**More robust**: learns prob. distribution over the weights.
:::

::::

::: {.notes}
* Any function approximator (weights and biases)
  - not just point estimates
  - have assoc. prob. distributions
* Inference time
  - distributions are marginalized out
    * MAP estimates
    * simple sampling
    * integration
:::